# -*- coding: utf-8 -*-
"""Insurance Claim Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJhvZbjU_2je_PL0LpgWzzccnQOXs0dQ
"""

!pip install catboost
from catboost import CatBoostClassifier
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import f1_score, confusion_matrix, accuracy_score

from google.colab import drive
drive.mount('/content/gdrive/')

df = pd.read_csv('/content/gdrive/MyDrive/train_qWM28Yl.csv')
df.head()

df.shape

df.info()

df['is_claim'].value_counts()*100/len(df)

x = df.drop(['policy_id', 'is_claim'], axis=1)
y = df['is_claim']

x_num = x.loc[:, x.dtypes!='object']
x_cat = x.loc[:, x.dtypes=='object']

def vif(df):
  vif = pd.DataFrame()
  vif['VIF'] = [variance_inflation_factor(df.values, i) for i in range(len(df.columns))]
  vif['Features'] = df.columns
  return vif.sort_values(by='VIF', ascending=False)

vif(x_num)

x_num = x_num.drop('displacement', axis=1)
vif(x_num)

x_num = x_num.drop('length', axis=1)
vif(x_num)

x_num = x_num.drop('turning_radius', axis=1)
vif(x_num)

x_num = x_num.drop('width', axis=1)
vif(x_num)

x_num = x_num.drop('gear_box', axis=1)
vif(x_num)

x_num = x_num.drop('gross_weight', axis=1)
vif(x_num)

x_num = x_num.drop('cylinder', axis=1)
vif(x_num)

x_num = x_num.drop('height', axis=1)
vif(x_num)

x_num = x_num.drop('make', axis=1)
vif(x_num)

x = pd.concat([x_num, x_cat], axis=1)

cat_indices = []
for i in range(len(x.columns)):
  if x.iloc[:,i].dtypes=='object':
    cat_indices.append(i)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

cats = CatBoostClassifier(verbose=False, scale_pos_weight=10, random_state=42)
cats.fit(x_train, y_train, cat_features=cat_indices, eval_set=(x_test, y_test))
y_pred = cats.predict(x_test)
f1_score(y_test, y_pred)

test_df = pd.read_csv('/content/gdrive/MyDrive/test_zo1G9sv.csv')
x_test_df = test_df.drop(['policy_id', 'displacement', 'length', 'turning_radius', 'width', 'gear_box', 'gross_weight', 'cylinder', 'height', 'make'], axis=1)
x_num = x_test_df.loc[:, x_test_df.dtypes!='object']
x_cat = x_test_df.loc[:, x_test_df.dtypes=='object']
x_test_df = pd.concat([x_num, x_cat], axis=1)
predictions = cats.predict(x_test_df)

submission_df = pd.read_csv('/content/gdrive/MyDrive/sample_submission_KvRh9Sx.csv')
submission_df['policy_id'] = test_df['policy_id']
submission_df['is_claim'] = predictions
submission_df.to_csv('submission.csv', index=False)